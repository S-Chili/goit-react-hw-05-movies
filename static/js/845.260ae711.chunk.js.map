{"version":3,"file":"static/js/845.260ae711.chunk.js","mappings":"qSAAMA,EAAW,+BACXC,EAAU,mCAEVC,EACY,uBADZA,EAES,gBAFTA,EAGU,SAHVA,EAIU,WAJVA,EAKU,WAGHC,EAAiB,mCAAG,sGACVC,MAAM,GAAD,OACrBJ,GADqB,OACVE,EADU,oBAC2BD,IAFtB,cACzBI,EADyB,gBAIZA,EAAOC,OAJK,cAIzBC,EAJyB,yBAKxBA,EAAKC,SALmB,2CAAH,qDAQjBC,EAAc,mCAAG,WAAMC,GAAN,yFACPN,MAAM,GAAD,OACrBJ,GADqB,OACVE,EADU,oBACwBD,EADxB,kBACyCS,IAFvC,cACtBL,EADsB,gBAITA,EAAOC,OAJE,cAItBC,EAJsB,yBAKrBA,EAAKC,SALgB,2CAAH,sDAQdG,EAAe,mCAAG,WAAMC,GAAN,yFACRR,MAAM,GAAD,OACrBJ,GADqB,OACVE,EADU,YACiBU,EADjB,oBAC+BX,EAD/B,oBADG,cACvBI,EADuB,gBAIVA,EAAOC,OAJG,cAIvBC,EAJuB,yBAKtBA,GALsB,2CAAH,sDAQfM,EAAe,mCAAG,WAAMD,GAAN,yFACRR,MAAM,GAAD,OACrBJ,EADqB,kBACHY,GADG,OACEV,EADF,oBACqCD,IAFlC,cACvBI,EADuB,gBAIVA,EAAOC,OAJG,cAIvBC,EAJuB,yBAKtBA,EAAKO,MALiB,2CAAH,sDAQfC,EAAgB,mCAAG,WAAMH,GAAN,yFACTR,MAAM,GAAD,OACrBJ,EADqB,kBACHY,GADG,OACEV,EADF,oBACqCD,IAFjC,cACxBI,EADwB,gBAIXA,EAAOC,OAJI,cAIxBC,EAJwB,yBAKvBA,EAAKC,SALkB,2CAAH,qD,+JC1C7B,EAA8B,6BAA9B,EAAoE,wBAApE,EAA0G,6BAA1G,EAAoJ,4BAApJ,EAA8L,6BAA9L,EAAuO,2BAAvO,EAAiR,8BAAjR,EAAyT,yBAAzT,EAA6V,0BAA7V,EAAoY,4BAApY,EAA6a,4B,SCIta,SAASQ,EAAT,GAA4B,IAAD,IAART,EAAQ,EAARA,KAChBU,EACNV,EADMU,YAAaC,EACnBX,EADmBW,MAAOC,EAC1BZ,EAD0BY,aAAcC,EACxCb,EADwCa,aAAcC,EACtDd,EADsDc,SAAUC,EAChEf,EADgEe,OAE5DC,EAASC,KAAKC,MAAqB,GAAfL,GAAqB,IACzCM,GAAWC,EAAAA,EAAAA,MACXC,EAAOF,EAASG,MAAMD,KACxBE,EAAa,GACbR,IAEFQ,GADoBC,MAAMC,QAAQV,GAAUA,EAASW,OAAOC,OAAOZ,IAC1Ca,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,MAEzD,IAAMC,EAAOpB,EAAeA,EAAaqB,MAAM,KAAK,GAAK,GAEzD,OACE,iCACE,qBAASC,UAAWC,EAApB,WACE,UAAC,KAAD,CAAMC,GAAE,iBAAEjB,QAAF,IAAEA,GAAF,UAAEA,EAAUG,aAAZ,aAAE,EAAiBD,YAAnB,QAA2B,IAAKa,UAAWC,EAAnD,WACE,SAAC,MAAD,KACA,iBAAMD,UAAWC,EAAjB,yBAEF,iBAAKD,UAAWC,EAAhB,WACE,gBACEE,IAAG,0CAAqC3B,GACxC4B,IAAK3B,EACLuB,UAAWC,KAEb,4BACI,kCAAQxB,GAAR,OAAgBqB,GAAI,YAASA,EAAT,SACpB,eAAGE,UAAWC,EAAd,yBAA0CnB,MAC1C,sCACA,cAAGkB,UAAWC,EAAd,SAAiCrB,KACjC,oCACA,uBAAIS,cAIZ,qBAASW,UAAWC,EAApB,WACE,cAAGD,UAAWC,EAAd,qCACA,gBAAID,UAAWC,EAAf,WACE,eAAID,UAAWC,EAAf,UACE,SAAC,KAAD,CAAMC,GAAG,OAAOd,MAAO,CAAED,KAAAA,GAAQa,UAAWC,EAA5C,UACA,iBAAMD,UAAWC,EAAjB,uBAGF,eAAID,UAAWC,EAAf,UACE,SAAC,KAAD,CAAMC,GAAG,UAAUd,MAAO,CAAED,KAAAA,GAAQa,UAAWC,EAA/C,UACA,iBAAMD,UAAWC,EAAjB,gCAKN,SAAC,KAAD,MAGL,CC3BD,MA3BA,WACE,OAA0BI,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,OAZAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAEuBxC,EAAAA,EAAAA,IAAgBsC,GAFvC,OAEU1C,EAFV,OAGIyC,GAAS,UAAKzC,IAHlB,gDAKI6C,QAAQC,IAAI,cAAZ,MALJ,0DADc,uBAAC,WAAD,wBASdC,EACD,GAAE,CAACL,IAECF,GAKH,+BACE,SAAC/B,EAAD,CAAST,KAAMwC,OALV,uBAQV,C","sources":["API/GetMovies.js","webpack://react-homework-template/./src/components/Details/Details.module.css?cd8c","components/Details/Details.jsx","pages/MovieDetail.js"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '765ba18e0dea441e3b70cde6d2dcbfe5';\n\nconst END_POINTS = {\n  trendingMovies: '/trending/movie/week',\n  querySearch: '/search/movie',\n  movieDetails: '/movie',\n  movieCredits: '/credits',\n  movieReviews: '/reviews',\n};\n\nexport const getTrendingMovies = async () => {\n  const result = await fetch(\n    `${BASE_URL}${END_POINTS.trendingMovies}?api_key=${API_KEY}`\n  );\n  const data = await result.json();\n  return data.results;\n};\n\nexport const getQueryMovies = async query => {\n  const result = await fetch(\n    `${BASE_URL}${END_POINTS.querySearch}?api_key=${API_KEY}&query=${query}`\n  );\n  const data = await result.json();\n  return data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const result = await fetch(\n    `${BASE_URL}${END_POINTS.movieDetails}/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  const data = await result.json();\n  return data;\n};\n\nexport const getMovieCredits = async id => {\n  const result = await fetch(\n    `${BASE_URL}/movie/${id}${END_POINTS.movieCredits}?api_key=${API_KEY}`\n  );\n  const data = await result.json();\n  return data.cast;\n};\n\nexport const getMoviesReviews = async id => {\n  const result = await fetch(\n    `${BASE_URL}/movie/${id}${END_POINTS.movieReviews}?api_key=${API_KEY}`\n  );\n  const data = await result.json();\n  return data.results;\n};","// extracted by mini-css-extract-plugin\nexport default {\"detailsSect\":\"Details_detailsSect__JXmeF\",\"button\":\"Details_button__kMnXV\",\"linkContent\":\"Details_linkContent__yaEL3\",\"moviesInfo\":\"Details_moviesInfo__m1QZf\",\"moviePoster\":\"Details_moviePoster__2iLOg\",\"userScore\":\"Details_userScore__Ma19o\",\"detailsDescr\":\"Details_detailsDescr__mfR94\",\"subSect\":\"Details_subSect__l9mzS\",\"subTitle\":\"Details_subTitle__eGkFO\",\"layoutList\":\"Details_layoutList__pOuy4\",\"layoutItem\":\"Details_layoutItem__8xe0K\"};","import { Link, useLocation, Outlet } from 'react-router-dom';\nimport { BsArrowLeft } from 'react-icons/bs';\nimport css from './Details.module.css'\nimport PropTypes from 'prop-types';\n\nexport function Details({ data }) {\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    data;\n  const rating = Math.round(vote_average * 10) + '%';\n  const location = useLocation();\n  const from = location.state.from;\n  let genresList = '';\n  if (genres) {\n    const genresArray = Array.isArray(genres) ? genres : Object.values(genres);\n    genresList = genresArray.map(genre => genre.name).join(' ');\n  }\n  const year = release_date ? release_date.split('-')[0] : '';\n\n  return (\n    <>\n      <section className={css.detailsSect}>\n        <Link to={location?.state?.from ?? '/'} className={css.button}>\n          <BsArrowLeft />\n          <span className={css.linkContent}>Go back</span>\n        </Link>\n        <div className={css.moviesInfo}>\n          <img\n            src={`https://image.tmdb.org/t/p/w200/${poster_path}`}\n            alt={title}\n            className={css.moviePoster}\n          />\n          <div>\n              <h2>{`${title}${year && ` (${year})`}`}</h2>\n              <p className={css.userScore}>User score: {rating}</p>\n              <h3>Overview</h3>\n              <p className={css.detailsDescr}>{overview}</p>\n              <h3>Genres</h3>\n              <p>{genresList}</p>\n          </div>\n        </div>\n      </section>\n      <section className={css.subSect}>\n        <p className={css.subTitle}>Additional information</p>\n        <ul className={css.layoutList}>\n          <li className={css.layoutItem}>\n            <Link to=\"cast\" state={{ from }} className={css.button}>\n            <span className={css.linkContent}>Cast</span>\n            </Link>\n          </li>\n          <li className={css.layoutItem}>\n            <Link to=\"reviews\" state={{ from }} className={css.button}>\n            <span className={css.linkContent}>Reviews</span>\n            </Link>\n          </li>\n        </ul>\n      </section>\n      <Outlet />\n    </>\n  );\n}\n\nDetails.propTypes = {\n  data: PropTypes.shape({\n    poster_path: PropTypes.string,\n    title: PropTypes.string,\n    release_date: PropTypes.string,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.oneOfType([\n      PropTypes.arrayOf(\n        PropTypes.shape({\n          id: PropTypes.number,\n          name: PropTypes.string,\n        })\n      ),\n      PropTypes.string,\n    ]),\n  }).isRequired,\n};","import {  useEffect, useState } from 'react';\nimport {  useParams } from 'react-router-dom';\nimport { getMovieDetails } from '../API/GetMovies';\nimport { Details } from '../components/Details/Details';\n\nfunction MovieDetail() {\n  const [movie, setMovie] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const data = await getMovieDetails(movieId);\n        setMovie({ ...data });\n      } catch (error) {\n        console.log('Error data:', error);\n      }\n    }\n    fetchData();\n  }, [movieId]);\n\n  if (!movie) {\n    return <></>;\n  }\n\n  return (\n    <>\n      <Details data={movie} />\n    </>\n  );\n}\n\nexport default MovieDetail;"],"names":["BASE_URL","API_KEY","END_POINTS","getTrendingMovies","fetch","result","json","data","results","getQueryMovies","query","getMovieDetails","id","getMovieCredits","cast","getMoviesReviews","Details","poster_path","title","release_date","vote_average","overview","genres","rating","Math","round","location","useLocation","from","state","genresList","Array","isArray","Object","values","map","genre","name","join","year","split","className","css","to","src","alt","useState","movie","setMovie","movieId","useParams","useEffect","console","log","fetchData"],"sourceRoot":""}